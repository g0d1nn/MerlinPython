import streamlit as st
import hashlib
from usuario import Usuario
from usuarioDAO import UsuarioDAO
from video import Video
from videoDAO import VideoDAO
import pandas as pd

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sistema Merlin",
    page_icon="üßô‚Äç‚ôÇÔ∏è",
    layout="wide"
)

# Fun√ß√£o para hash da senha
def hash_senha(senha):
    return hashlib.sha256(senha.encode()).hexdigest()

# Fun√ß√£o para verificar se o usu√°rio est√° logado
def verificar_login():
    return 'usuario_logado' in st.session_state and st.session_state.usuario_logado is not None

# Fun√ß√£o para fazer logout
def fazer_logout():
    st.session_state.usuario_logado = None
    st.rerun()

# Fun√ß√£o de login
def tela_login():
    st.title("üîê Login")
    
    with st.form("login_form"):
        email = st.text_input("Email")
        senha = st.text_input("Senha", type="password")
        submit = st.form_submit_button("Entrar")
        
        if submit:
            if email and senha:
                usuario_dao = UsuarioDAO()
                usuario = usuario_dao.buscar_por_email(email)
                
                if usuario and usuario.senha == hash_senha(senha):
                    st.session_state.usuario_logado = usuario
                    st.success("Login realizado com sucesso!")
                    st.rerun()
                else:
                    st.error("Email ou senha incorretos!")
            else:
                st.error("Preencha todos os campos!")

# Fun√ß√£o de cadastro
def tela_cadastro():
    st.title("üìù Cadastro de Usu√°rio")
    
    with st.form("cadastro_form"):
        nome = st.text_input("Nome completo")
        email = st.text_input("Email")
        senha = st.text_input("Senha", type="password")
        confirmar_senha = st.text_input("Confirmar senha", type="password")
        
        # S√≥ permite escolher permiss√£o se for admin
        if verificar_login() and st.session_state.usuario_logado.permissao == "admin":
            permissao = st.selectbox("Permiss√£o", ["padrao", "admin"])
        else:
            permissao = "padrao"
        
        submit = st.form_submit_button("Cadastrar")
        
        if submit:
            if nome and email and senha and confirmar_senha:
                if senha == confirmar_senha:
                    usuario_dao = UsuarioDAO()
                    
                    # Verificar se email j√° existe
                    if usuario_dao.buscar_por_email(email):
                        st.error("Este email j√° est√° cadastrado!")
                    else:
                        novo_usuario = Usuario(
                            nome=nome,
                            email=email,
                            senha=hash_senha(senha),
                            permissao=permissao
                        )
                        
                        try:
                            usuario_dao.criar(novo_usuario)
                            st.success("Usu√°rio cadastrado com sucesso!")
                        except Exception as e:
                            st.error(f"Erro ao cadastrar usu√°rio: {str(e)}")
                else:
                    st.error("As senhas n√£o coincidem!")
            else:
                st.error("Preencha todos os campos!")

# Fun√ß√£o para gerenciar usu√°rios (apenas admin)
def gerenciar_usuarios():
    st.title("üë• Gerenciar Usu√°rios")
    
    if not verificar_login() or st.session_state.usuario_logado.permissao != "admin":
        st.error("Acesso negado! Apenas administradores podem acessar esta p√°gina.")
        return
    
    usuario_dao = UsuarioDAO()
    
    # Tabs para diferentes a√ß√µes
    tab1, tab2, tab3 = st.tabs(["Listar Usu√°rios", "Editar Usu√°rio", "Excluir Usu√°rio"])
    
    with tab1:
        st.subheader("Lista de Usu√°rios")
        usuarios = usuario_dao.listar()
        
        if usuarios:
            df = pd.DataFrame(usuarios)
            if 'senha' in df.columns:
                df = df.drop('senha', axis=1)  # N√£o mostrar senhas
            st.dataframe(df, use_container_width=True)
        else:
            st.info("Nenhum usu√°rio cadastrado.")
    
    with tab2:
        st.subheader("Editar Usu√°rio")
        usuarios = usuario_dao.listar()
        
        if usuarios:
            # Selectbox para escolher usu√°rio
            opcoes_usuarios = {f"{u['nome']} ({u['email']})": u['id'] for u in usuarios}
            usuario_selecionado = st.selectbox("Selecionar usu√°rio", list(opcoes_usuarios.keys()))
            
            if usuario_selecionado:
                user_id = opcoes_usuarios[usuario_selecionado]
                usuario_atual = next(u for u in usuarios if u['id'] == user_id)
                
                with st.form("editar_usuario_form"):
                    novo_nome = st.text_input("Nome", value=usuario_atual['nome'])
                    novo_email = st.text_input("Email", value=usuario_atual['email'])
                    nova_permissao = st.selectbox("Permiss√£o", ["padrao", "admin"], 
                                                index=0 if usuario_atual['permissao'] == "padrao" else 1)
                    
                    submit = st.form_submit_button("Atualizar")
                    
                    if submit:
                        usuario_editado = Usuario(
                            id=user_id,
                            nome=novo_nome,
                            email=novo_email,
                            senha=usuario_atual['senha'],  # Manter senha atual
                            permissao=nova_permissao
                        )
                        
                        try:
                            usuario_dao.atualizar(usuario_editado)
                            st.success("Usu√°rio atualizado com sucesso!")
                            st.rerun()
                        except Exception as e:
                            st.error(f"Erro ao atualizar usu√°rio: {str(e)}")
        else:
            st.info("Nenhum usu√°rio cadastrado.")
    
    with tab3:
        st.subheader("Excluir Usu√°rio")
        usuarios = usuario_dao.listar()
        
        if usuarios:
            opcoes_usuarios = {f"{u['nome']} ({u['email']})": u['id'] for u in usuarios}
            usuario_selecionado = st.selectbox("Selecionar usu√°rio para excluir", list(opcoes_usuarios.keys()))
            
            if usuario_selecionado:
                st.warning("‚ö†Ô∏è Esta a√ß√£o n√£o pode ser desfeita!")
                
                if st.button("Confirmar Exclus√£o", type="primary"):
                    user_id = opcoes_usuarios[usuario_selecionado]
                    
                    try:
                        usuario_dao.deletar(user_id)
                        st.success("Usu√°rio exclu√≠do com sucesso!")
                        st.rerun()
                    except Exception as e:
                        st.error(f"Erro ao excluir usu√°rio: {str(e)}")
        else:
            st.info("Nenhum usu√°rio cadastrado.")

# Fun√ß√£o para home - visualizar v√≠deos (usu√°rios padr√£o)
def home_videos():
    st.title("üè† Home - V√≠deos Dispon√≠veis")
    
    if not verificar_login():
        st.error("Fa√ßa login para acessar esta p√°gina.")
        return
    
    video_dao = VideoDAO()
    videos = video_dao.listar()
    
    if videos:
        st.subheader("üìö Biblioteca de V√≠deos")
        
        # Mostrar v√≠deos em cards
        for video in videos:
            with st.expander(f"üé• {video['titulo']}"):
                st.write(f"**Descri√ß√£o:** {video['descricao']}")
                
                # Se a URL for do YouTube, embed o v√≠deo
                if 'youtube.com/watch' in video['url'] or 'youtu.be/' in video['url']:
                    st.video(video['url'])
                else:
                    st.write(f"**Link do v√≠deo:** {video['url']}")
                    st.markdown(f"[Assistir v√≠deo]({video['url']})")
    else:
        st.info("Nenhum v√≠deo dispon√≠vel no momento.")

# Fun√ß√£o para gerenciar v√≠deos (apenas admin)
def gerenciar_videos():
    st.title("üé• Gerenciar V√≠deos")
    
    if not verificar_login():
        st.error("Fa√ßa login para acessar esta p√°gina.")
        return
    
    if st.session_state.usuario_logado.permissao != "admin":
        st.error("Acesso negado! Apenas administradores podem gerenciar v√≠deos.")
        return
    
    video_dao = VideoDAO()
    
    # Tabs para diferentes a√ß√µes
    tab1, tab2, tab3, tab4 = st.tabs(["Listar V√≠deos", "Adicionar V√≠deo", "Editar V√≠deo", "Excluir V√≠deo"])
    
    with tab1:
        st.subheader("Lista de V√≠deos")
        videos = video_dao.listar()
        
        if videos:
            df = pd.DataFrame(videos)
            st.dataframe(df, use_container_width=True)
        else:
            st.info("Nenhum v√≠deo cadastrado.")
    
    with tab2:
        st.subheader("Adicionar Novo V√≠deo")
        
        with st.form("adicionar_video_form"):
            titulo = st.text_input("T√≠tulo do v√≠deo")
            descricao = st.text_area("Descri√ß√£o")
            url = st.text_input("URL do v√≠deo")
            
            submit = st.form_submit_button("Adicionar V√≠deo")
            
            if submit:
                if titulo and descricao and url:
                    novo_video = Video(
                        titulo=titulo,
                        descricao=descricao,
                        url=url
                    )
                    
                    try:
                        video_dao.criar(novo_video)
                        st.success("V√≠deo adicionado com sucesso!")
                        st.rerun()
                    except Exception as e:
                        st.error(f"Erro ao adicionar v√≠deo: {str(e)}")
                else:
                    st.error("Preencha todos os campos!")
    
    with tab3:
        st.subheader("Editar V√≠deo")
        videos = video_dao.listar()
        
        if videos:
            opcoes_videos = {f"{v['titulo']}": v['id'] for v in videos}
            video_selecionado = st.selectbox("Selecionar v√≠deo", list(opcoes_videos.keys()))
            
            if video_selecionado:
                video_id = opcoes_videos[video_selecionado]
                video_atual = next(v for v in videos if v['id'] == video_id)
                
                with st.form("editar_video_form"):
                    novo_titulo = st.text_input("T√≠tulo", value=video_atual['titulo'])
                    nova_descricao = st.text_area("Descri√ß√£o", value=video_atual['descricao'])
                    nova_url = st.text_input("URL", value=video_atual['url'])
                    
                    submit = st.form_submit_button("Atualizar")
                    
                    if submit:
                        video_editado = Video(
                            id=video_id,
                            titulo=novo_titulo,
                            descricao=nova_descricao,
                            url=nova_url
                        )
                        
                        try:
                            video_dao.atualizar(video_editado)
                            st.success("V√≠deo atualizado com sucesso!")
                            st.rerun()
                        except Exception as e:
                            st.error(f"Erro ao atualizar v√≠deo: {str(e)}")
        else:
            st.info("Nenhum v√≠deo cadastrado.")
    
    with tab4:
        st.subheader("Excluir V√≠deo")
        videos = video_dao.listar()
        
        if videos:
            opcoes_videos = {f"{v['titulo']}": v['id'] for v in videos}
            video_selecionado = st.selectbox("Selecionar v√≠deo para excluir", list(opcoes_videos.keys()))
            
            if video_selecionado:
                st.warning("‚ö†Ô∏è Esta a√ß√£o n√£o pode ser desfeita!")
                
                if st.button("Confirmar Exclus√£o", type="primary"):
                    video_id = opcoes_videos[video_selecionado]
                    
                    try:
                        video_dao.deletar(video_id)
                        st.success("V√≠deo exclu√≠do com sucesso!")
                        st.rerun()
                    except Exception as e:
                        st.error(f"Erro ao excluir v√≠deo: {str(e)}")
        else:
            st.info("Nenhum v√≠deo cadastrado.")

# Fun√ß√£o principal
def main():
    # Inicializar session state
    if 'usuario_logado' not in st.session_state:
        st.session_state.usuario_logado = None
    
    # Sidebar para navega√ß√£o
    with st.sidebar:
        st.title("üßô‚Äç‚ôÇÔ∏è Sistema Merlin")
        
        if verificar_login():
            st.success(f"Bem-vindo, {st.session_state.usuario_logado.nome}!")
            st.write(f"Permiss√£o: {st.session_state.usuario_logado.permissao}")
            
            # Menu de navega√ß√£o baseado na permiss√£o
            if st.session_state.usuario_logado.permissao == "admin":
                menu_options = ["Home", "Gerenciar V√≠deos", "Gerenciar Usu√°rios", "Cadastrar Usu√°rio"]
            else:
                menu_options = ["Home"]
            
            menu_choice = st.selectbox("Navegar para:", menu_options)
            
            if st.button("Logout"):
                fazer_logout()
                
        else:
            menu_choice = st.selectbox("Escolha uma op√ß√£o:", ["Login", "Cadastro"])
    
    # Renderizar a p√°gina escolhida
    if not verificar_login():
        if menu_choice == "Login":
            tela_login()
        elif menu_choice == "Cadastro":
            tela_cadastro()
    else:
        if menu_choice == "Home":
            home_videos()
        elif menu_choice == "Gerenciar V√≠deos":
            gerenciar_videos()
        elif menu_choice == "Gerenciar Usu√°rios":
            gerenciar_usuarios()
        elif menu_choice == "Cadastrar Usu√°rio":
            tela_cadastro()

if __name__ == "__main__":
    main()